/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var S1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "marker"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point",
          "coordinates": [
            100.58207224393509,
            14.048846940620747
          ]
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                99.51368334973476,
                14.769260425509373
              ],
              [
                99.51368334973476,
                13.38396331426771
              ],
              [
                101.31544116223476,
                13.38396331426771
              ],
              [
                101.31544116223476,
                14.769260425509373
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var col = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) 
                    .filter(ee.Filter.eq('resolution_meters', 10))
                    .filterBounds(geometry)
                    .select('VH')
;

var visParams = {min: -29.264204107025904, max: -8.938093778644141}

col = col.map(function(img) {
  var doy = ee.Date(img.get('system:time_start')).getRelative('month', 'year');
  return img.set('doy', doy);
}
);

var distictDOY = col.filterDate('2021-09-01', '2022-01-31');
var filter = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});
var join = ee.Join.saveAll('doy_matches');
var joinCol = ee.ImageCollection(join.apply(distictDOY, col, filter));

var comp = joinCol.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
    );
    return doyCol.reduce(ee.Reducer.median());
});

// Add Text
var text = require('users/gena/packages:text')


// Generate GIF
var gifVis = comp.map(function(img) {
  return img.visualize(visParams);
});

var gifParams = {
  'region': geometry,
  'dimensions': 600,
  'framesPerSecond': 10
};

print(gifVis.getVideoThumbURL(gifParams));
print(ui.Thumbnail(gifVis, gifParams));